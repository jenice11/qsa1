
String.prototype.startsWith = function(str) {
    return (this.length >= str.length)
        && (this.substr(0, str.length) == str);
};

String.prototype.startsWithIgnoreCase = function(str) {
    return this.toLowerCase().startsWith(str.toLowerCase());
};

var console = console || {
	log: function(message) {
	}
};




(function($) {
	/**
	 * Used for version test cases.
	 * 
	 * @param {string} left A string containing the version that will become
	 *		the left hand operand.
	 * @param {string} oper The comparison operator to test against. By
	 *		default, the "==" operator will be used.
	 * @param {string} right A string containing the version that will
	 *		become the right hand operand. By default, the current jQuery
	 *		version will be used.
	 *		
	 * @return {boolean} Returns the evaluation of the expression, either
	 *		 true or false.
	 *
	 *
	 *Usage:
		$.isVersion("1.4.2"); // returns true, if $().jquery == "1.4.2"
		$.isVersion("1.3.2", ">"); // returns true if $().jquery > "1.3.2"
		$.isVersion("1.3", ">", "1.2.6"); // returns true
		$.isVersion("1.3.2", "<", "1.3.1"); // returns false
		$.isVersion("1.4.0", ">=", "1.3.2"); // returns true
		$.isVersion("1.4.1", "<=", "1.4.1"); // returns true
	 */
	$.isVersion = function(left, oper, right) {
		if (left) {
			var pre = /pre/i,
				replace = /[^\d]+/g,
				oper = oper || "==",
				right = right || $().jquery,
				l = left.replace(replace, ''),
				r = right.replace(replace, ''),
				l_len = l.length, r_len = r.length,
				l_pre = pre.test(left), r_pre = pre.test(right);

			l = (r_len > l_len ? parseInt(l) * ((r_len - l_len) * 10) : parseInt(l));
			r = (l_len > r_len ? parseInt(r) * ((l_len - r_len) * 10) : parseInt(r));

			switch(oper) {
				case "==": {
					return (true === (l == r && (l_pre == r_pre)));
				}
				case ">=": {
					return (true === (l >= r && (!l_pre || l_pre == r_pre)));
				}
				case "<=": {
					return (true === (l <= r && (!r_pre || r_pre == l_pre)));
				}
				case ">": {
					return (true === (l > r || (l == r && r_pre)));
				}
				case "<": {
					return (true === (l < r || (l == r && l_pre)));
				}
			}
		}

		return false;
	}
})(jQuery);


var plaudit = plaudit || {};
plaudit.assert = {
	minJQueryVer : function( minVer ) {
		if ( jQuery.isVersion(minVer, ">") ) {
			throw new Error( 'Requires JQuery ' + minVer + ' or later. Time to upgrade.' );
		}
	}
}