if (RightNow.UI.AbuseDetection) { throw new Error("The RightNow.UI.AbuseDetection namespace variable has already been defined somewhere."); }
/**
 * RightNow.UI.AbuseDetection
 *
 * @namespace This namespace contains functions and variables which relate to
 * detecting and preventing abusive behavior, such as displaying CAPTCHAs.
 */
RightNow.UI.AbuseDetection = (function(){
   
    /**
     * @private
     * @constant
     **/ 
    var _captchaRequiredText = "==CHALLENGE REQUIRED==";
    /**
     * @private
     * @constant
     **/
    var _captchaIncorrectText = "==CHALLENGE INCORRECT==";
    /**
     * @type boolean
     * @private
     */
    var _isRetry = false;
    
    return {
        /**
         * Contains options which will be passed by the default challenge handler to the underlying challenge provider.  See http://recaptcha.net/apidocs/captcha/client.html for examples that will work with the reCAPTCHA.net challenge provider.
         * @type Object
         */
        options: {}, 
    
        /** Indicates if the server says that the user submitted an incorrect CAPTCHA in the previous request.
         * @return {boolean} whether the previous request contained an incorrect CAPTCHA.
         */
        isRetry: function() {
            return _isRetry;
        },
    
        /**
         * Returns an object containing methods which can create and interrogate an abuse challenge.
         * @param {Object} abuseResponse An object containing a 'challengeProvider' member containing script which will evaluate to a challenge provider.
         * @return {*} An object implementing the challenge provider interface.
         */
        getChallengeProvider: function(abuseResponse) {
            if (!abuseResponse || !abuseResponse.challengeProvider) {
                throw "The server did not return a challenge provider.";
            }
            try {
                return eval(abuseResponse.challengeProvider);
            } 
            catch (ex) {
                throw "There was an error evaluating the challenge provider.  " + ex;
            }
        },
    
        /**
         * Returns the dialog caption returned by the server.
         * @param {Object} abuseResponse An object containing a 'dialogCaption' member.
         * @return {string} The dialog caption returned by the server.
         */
        getDialogCaption: function(abuseResponse) {
            return (abuseResponse) ? abuseResponse.dialogCaption : "";
        },
    
        /**
         * Examines the YUI Connect response object to determine if the server said that there was abuse.
         * @param {Object} responseObject YUI Connect response object
         * @return {boolean} Indicating abuse.
         */
        doesResponseIndicateAbuse: function(responseObject) {
            if (!responseObject || !responseObject.responseText) {
                return false;
            }
            if (_captchaRequiredText === responseObject.responseText.slice(0, _captchaRequiredText.length)) {
                _isRetry = false;
                return true;
            }
            if (_captchaIncorrectText === responseObject.responseText.slice(0, _captchaIncorrectText.length)) {
                _isRetry = true;
                return true;
            }
            return false;
        },
        
        Default: function(requestResubmitHandler) {
            this._requestResubmitHandler = requestResubmitHandler || RightNow.Event.createDelegate(this, this._requestResubmitHandler);
        }
    };
}());

RightNow.UI.AbuseDetection.Default.prototype = {
    /**
     * @type Object
     * @private
     * This is just a shortcut for when I need to refer to the parent namespace.
     */
    _abuse: RightNow.UI.AbuseDetection,

    /**
     * @constant
     * @private
     * */
    _abuseChallengeDivID: "rn_DefaultAbuseChallengeDiv",

    /**
     * @type Object
     * @private
     * The dialog the CAPTCHA will be shown in by default
     */
    _dialog: null,

    /**
     * @type Object
     * @private
     * The instance of the challenge provider the service passed the client code for.
     */
    _challengeProvider: null,

    /**
     * @type Object
     * @private
     */
    _requestObject: null,

    /**
     * @private
     */
    _requestResubmitHandler: function() {
        var postData = this._requestObject.post || {};
        YAHOO.lang.augmentObject(postData, this._challengeProvider.getInputs(this._abuseChallengeDivID), true);
        RightNow.Ajax.makeRequest(this._requestObject.url, postData, this._requestObject);
    },

    /**
     * @private
     */
    _deprecatedEventBusRequestResubmitHandler: function() {
        var inputs = this._challengeProvider.getInputs(this._abuseChallengeDivID);
        // Prefix a "?" so that addParameter will think that it's dealing with a query string style-URL and will add parameters the way I need.
        var postData = "?" + this._requestObject.post;
        for (var inputName in inputs) {
            if (inputs.hasOwnProperty(inputName)) {
                postData = RightNow.Url.addParameter(postData, inputName, inputs[inputName]);
            }
        }
        postData = postData.slice(1); // Remove that tricky "?" we added above.
        YAHOO.util.Connect.asyncRequest('POST', this._requestObject.url, this._requestObject.callback, postData);
    },

    /**
     * @private
     */
    _dialogSubmitHandler: function() {
        this._dialog.hide();
        this._requestResubmitHandler();
        this._challengeProvider.destroy();
        this._clearDefaultDialog();
    },

    /**
     * @private
     * @param {Object} abuseResponse Response returned by server
     */
    _createDefaultDialog: function(abuseResponse) {
        var dialogTitle = this._abuse.getDialogCaption(abuseResponse),
            abuseChallengeDiv = document.getElementById(this._abuseChallengeDivID),
            dialogOptions = {
                "buttons": [{ 
                    text: RightNow.Interface.getMessage("OK_LBL"), 
                    isDefault: true, 
                    handler: { scope: this, fn: this._dialogSubmitHandler }
                }],
                "close": false,
                "width": '400px'
            };
        // Because two different requests on a page can result in a CAPTCHA, there
        // could be two instances of this class.  If they both try to create a dialog
        // with the same div ID, things go pear-shaped.  Ergo, avoid creating two divs
        // with the same ID.
        if (!abuseChallengeDiv) {
            abuseChallengeDiv = document.createElement("div");
            abuseChallengeDiv.id = this._abuseChallengeDivID;
        }
        this._dialog = RightNow.UI.Dialog.actionDialog(dialogTitle, abuseChallengeDiv, dialogOptions);
        if(!this._validationLink)
        {
            this._validationLink = document.createElement("a");
            this._validationLink.innerHTML = this._abuse.getDialogCaption(abuseResponse);
            this._validationLink.href='javascript:void(0);';
            this._validationLink.onclick = RightNow.Event.createDelegate(this, function() {
                this._challengeProvider.focus(this._abuseChallengeDivID);
                return false;
            });
            this._errorMessageDiv = document.createElement("div");
            this._errorMessageDiv.appendChild(this._validationLink);
            YAHOO.util.Dom.insertBefore(this._errorMessageDiv, this._abuseChallengeDivID);
        }
        YAHOO.util.Dom.addClass(this._validationLink, "rn_Hidden");
        RightNow.UI.Dialog.addDialogEnterKeyListener(this._dialog, function(type, args) {
            if (type !== "keyPressed" || YAHOO.util.Event.getTarget(args[1]).tagName !== 'INPUT' || YAHOO.util.Event.getTarget(args[1]).type !== "text") {
                return;
            }
            // Without this, IE gets weird and calls the submit handler twice.
            YAHOO.util.Event.stopEvent(args[1]);
            this._dialogSubmitHandler();
        }, this);
    },

    getChallengeHandler: function() {
        return RightNow.Event.createDelegate(this, this._challengeHandler);
    },

    /**
     * @private
     * @param {Object} abuseResponse 
     * @param {Object} requestObject 
     * @param {Boolean} isRetry 
     */
    _challengeHandler: function(abuseResponse, requestObject, isRetry) {
        this._challengeProvider = this._abuse.getChallengeProvider(abuseResponse);
        this._requestObject = requestObject;
        if (!this._dialog) {
            this._createDefaultDialog(abuseResponse);
        }
        else {
            this._dialog.setHeader(this._abuse.getDialogCaption(abuseResponse));
            this._clearDefaultDialog();
        }

        if(this._abuse.isRetry() && this._validationLink)
        {
            YAHOO.util.Dom.addClass(this._errorMessageDiv, "rn_ErrorMessage rn_MessageBox");
            YAHOO.util.Dom.removeClass(this._validationLink, "rn_Hidden");
        }

        this._challengeProvider.create(this._abuseChallengeDivID, this._abuse.options, RightNow.Event.createDelegate(this, function() {
            var ariaBusy = "true";
            if(this._abuse.isRetry())
            {
                YAHOO.lang.later(100, this, function() {
                    if (this._validationLink && this._validationLink.focus) {
                        this._validationLink.focus(); 
                    } 
                });
                ariaBusy = "false";
            }
            else
            {
                this._dialog.showEvent.subscribe(this._challengeProvider.focus);
            }
            if(this._dialog.body)
                YAHOO.util.Dom.setAttribute(this._dialog.body, "aria-busy", ariaBusy);
            else if(this._dialog._content)
                YAHOO.util.Dom.setAttribute(this._dialog._content, "aria-busy", ariaBusy);
            this._dialog.show();

            // Disable the dialog's OK button until a user returns a valid captcha check.
            this._dialog.disableButtons();
            }),
        this._dialog);
    },

    /**
     * @private
     */
    _clearDefaultDialog: function() {
        var div = document.getElementById(this._abuseChallengeDivID);
        if (div) {
            div.innerHTML = "<div style='height: 129px'><img src='/euf/rightnow/images/indicator.gif'></div>";
        }

        if(this._dialog) {
            var dialogID = this._dialog.innerElement.getAttribute('id') + '_c';
            var dialog = document.getElementById(dialogID);
            // reCaptchav2 will not render in the element in which it was already rendered. So delete it when the dialog is closed.
            dialog.parentNode.removeChild(dialog);
        }
    }
};
