if(RightNow)
    throw new Error("The RightNow namespace variable has already been defined somewhere.");

/**
 * RightNow namespace
 *
 * @namespace The RightNow global namespace object.
 */
var RightNow = {
    /**
     * Creates and returns (if it doesn't already exist) the namespace specified under the global RightNow namespace
     * @param {...string} args List of namespaces to create
     * @return {Object} A reference to the last namespace object created
     */
    namespace: function(args){
        var a=arguments, o=null, i, j, d;
        for (i=0; i<a.length; i=i+1) {
            d=a[i].split(".");
            o=RightNow;
            for (j=(d[0] === "RightNow") ? 1 : 0; j<d.length; j++) {
                o[d[j]]=o[d[j]] || {};
                o=o[d[j]];
            }
        }
        return o;
    },

    /**
     * RightNow.Lang
     *
     * @namespace Contains common language utility functions.
     */
    Lang: {
        /**
        * Iterates over each value in the sourceArray passing them to the
        * callback function. If the callback function returns true the value in
        * the array is returned into the result array. Array keys are preserved.
        * @param {Array} sourceArray The array to remove null values from
        * @param {function(*): boolean}callbackFunction Function If none is supplied, all values
        * equal to false will be removed
        * @return {Array} the resulting array with callbackFunction applied
        */
        arrayFilter : function(sourceArray, callbackFunction) {
            if(typeof callbackFunction === "undefined")
                /**@ignore*/
                callbackFunction = function(item){return (item != null && item != false);};
            else if(typeof callbackFunction !== "function")
                throw new TypeError();

            var returnArray = [], i;
            for(i in sourceArray) {
                if(typeof sourceArray[i] !== "function" && callbackFunction(sourceArray[i]))
                    returnArray[i] = sourceArray[i];
            }
            return returnArray;
        },

        /**
        * Performs a deep copy of the passed-in complex object.
        * Ignores any functions that may be part of the object.
        * @param {Object} objToCopy The object to create a new copy of
        * @return {Object} The new copy of objToCopy
        */
        cloneObject : function(objToCopy) {
            if(objToCopy === null) return null;
            var retObj = {};
            if(typeof objToCopy === "object") {
                if(typeof objToCopy.length !== "undefined")
                    retObj = [];
                for(var i in objToCopy) {
                    if(typeof objToCopy[i] === "object") {
                        retObj[i] = RightNow.Lang.cloneObject(objToCopy[i]);
                    }
                    else if(typeof objToCopy[i] === "string" || typeof objToCopy[i] === "number") {
                        retObj[i] = objToCopy[i];
                    }
                    else if(typeof objToCopy[i]  === "boolean") {
                        retObj[i] = (objToCopy[i]) ? true : false;
                    }
                }
            }
            return retObj;
        }
    },

    /**
     * RightNow.Profile
     *
     * @namespace Contains search preferences of the currently logged in user
     */
    Profile: {
        /**
         * User's default keyword
         * @type string
         */
        keyword: '',
        /**
         * User's default search type
         * @type string
         */
        searchType: '',
        /**
         * User's default product chain
         * @type string
         */
        product: '',
        /**
         * User's default category chain
         * @type string
         */
        category:''
    },

    /**
     * Action Capture Service API
     * @namespace Contains functions to interact with the JS Action Capture Service API
     */
    ActionCapture: (function(){
        window._rnq = window._rnq || [];
        return {
            /**
             * Records an action to the Action Capture Service
             * @param {string} subject The subject of the action
             * @param {string} verb The action being performed
             * @param {*} actionObject Optional content to additionally send with the action. Can be in any
             *                         format, but will be converted into a string using the toString method.
             * @param {function(...)=} callbackFunction Function to execute once actions have been sent
             * @param {Object=} scope Scope with which to execute callbackFunction. If not set, defaults to window
             */
            record: function(subject, verb, actionObject, callbackFunction, scope){
                var action = [subject, verb];
                if(actionObject !== null && actionObject !== undefined && actionObject !== ''){
                    action.push(actionObject.toString());
                }
                window._rnq.push(action);

                if(callbackFunction)
                {
                    this.flush(callbackFunction, scope);
                }
            },

            /**
             * Forces the Action Capture Service to attempt to immediately send all queued actions. Should be used if there are
             * actions to record, but the page is about to be redirected.
             * @param {?function(...)} callbackFunction Function to execute once actions have been sent
             * @param {?Object} scope Scope with which to execute callbackFunction. If not set, defaults to window
             * @param {?number} timeout Number of milliseconds to wait for the ACS request to finish before we forcefully
                                        invoke the callback. Defaults to 250ms, and the max timeout length is 750ms.
             * @param {...} callbackArguments Variable number of arguments to pass to the callbackFunction when invoked.
             */
            flush: function(callbackFunction, scope, timeout, callbackArguments){
                if(!callbackFunction){
                    window._rnq.push(function(){});
                    return;
                }
                timeout = Math.min((timeout || 250), 750);
                scope = scope || window;
                callbackArguments = Array.prototype.slice.call(arguments, 3);
                var scopedCallback = function(){
                        callbackFunction.apply(scope, callbackArguments);
                    },
                    timeoutID = setTimeout(scopedCallback, timeout);
                window._rnq.push(function(){
                    clearTimeout(timeoutID);
                    scopedCallback();
                });
            }
        };
    }())
};

/**
 * RightNow.Widget
 *
 * @namespace Contains all widget instance objects and provides functions for creating new instances and
 * retrieving existing ones.
 */
RightNow.Widget = (function()
{
    var _widgetInstances = {};

    return {
        /**
         * Creates a new widget JS instance
         * @param {Object} data Widget instance information, including all attributes and any additional variables
         * @param {string} instanceID The name of this widget instance
         * @param {string} javaScriptPath The path to the widget
         * @param {string} className The name of the widget to instantiate
         * @param {string} suffix The unique ID of the widget instance
         * @param {boolean=} [showWarnings=false] Denotes whether are not to show an error
         */
        createWidgetInstance: function(data, instanceID, javaScriptPath, className, suffix, showWarnings)
        {
            var mappedData = {"info":{"controller_name":data.i.c,"name":data.i.n,"w_id":data.i.w},"attrs":data.a,"js":data.j};
            if(data.i.t)
                mappedData.info.type = data.i.t;
            _widgetInstances[instanceID] = {"javaScriptPath": javaScriptPath, "className": className, "suffix": suffix};
            // Support old-school widget instantiation first.
            // Old Safari exposed all DOM elements with ids as properties on window, so check for that.
            if(typeof window[className] === 'function' && window[className] + '' !== '[object HTMLCollection]')
            {
                _widgetInstances[instanceID].instance = new window[className](mappedData);
                _widgetInstances[instanceID].instance.init();
                window['js_' + mappedData.info.w_id] = _widgetInstances[instanceID].instance;
            }
            else if(typeof this[className] === 'function')
            {
                _widgetInstances[instanceID].instance = new this[className](mappedData, instanceID);
            }
            else if(showWarnings)
            {
                alert(RightNow.Interface.getMessage('FOLLOWING_WIDGET_JAVASCRIPT_SYNTAX_MSG') + javaScriptPath);
                return;
            }
        },

        /**
         * Returns instance information for the widget ID specified
         * @param {string} widgetInstanceID The widget instance ID
         * @return {?Object} Widget instance information
         */
        getWidgetInformation: function(widgetInstanceID)
        {
            return _widgetInstances[widgetInstanceID] || null;
        },

        /**
         * Returns the actual instance of the widget given its ID
         * @param {string} widgetInstanceID The widget instance ID
         * @return {?Object} The instance of the widget, or null if it doesn't exist
         */
        getWidgetInstance: function(widgetInstanceID)
        {
            return (_widgetInstances[widgetInstanceID]) ? _widgetInstances[widgetInstanceID].instance : null;
        }
    };
}());

/**
 * RightNow.Interface
 *
 * @namespace Contains functions to retrieve messagebase and configbase values
 */
RightNow.Interface = (function()
{
    var _configBaseInitializer = null,
        _configbaseEntries = null,
        _messagebaseEntries = null,
        _messageBaseInitializer = null;
    return {
        /**
         * @namespace Contains a number of dynamically passed in constants from PHP
         */
        Constants: {},

        /**
         * Returns a configbase value
         * @param {string} index The configbase key
         * @return {string} The configbase value
         */
        getConfig: function(index)
        {
            if(_configbaseEntries === null)
                _configbaseEntries = _configBaseInitializer();
            if(_configbaseEntries[index] !== undefined)
                return _configbaseEntries[index];
            return "";
        },

        /**
         * Returns a messagebase value
         * @param {string} index The messagebase key
         * @return {string} The messagebase value
         */
        getMessage: function(index)
        {
            if(_messagebaseEntries === null)
                _messagebaseEntries = _messageBaseInitializer();
            if(_messagebaseEntries[index] !== undefined)
                return _messagebaseEntries[index];
            return "";
        },
        /**
         * Temporary wrapper for getMessage() to allow backporting of code from the new "gettext"
         * style calls in the Dynamic Upgrades project, currently slated for v12.2.
         *
         * @private
         * @param {string} message - The actual message string.
         * @param {string} context - The old msgbase define as a string. e.g. 'OPEN_LBL' or 'OPEN_LBL:RNW'
         * @return {string}
         */
        msg: function(message, context)
        {
            var messageBaseValue = this.getMessage(context);
            return (messageBaseValue === '') ? message : messageBaseValue;
        },
        /**@private*/
        ASTRgetMessage: function(value)
        {
            return value;
        },

        /**@private*/
        setConfigbase: function(initializer)
        {
            _configBaseInitializer = initializer;
        },
        /**@private*/
        setMessagebase: function(initializer)
        {
            _messageBaseInitializer = initializer;
        }
    };
}());

/**
 * RightNow.JSON
 *
 * @namespace Contains functions to encode and decode data in JSON format. This
 * wrapper will either use the native browser functions, or use the YUI
 * library if not available.
 */
RightNow.JSON = (function()
{
    var _canUseNativeStringify = (typeof(JSON) === 'object' && JSON !== null) && (!YAHOO.env.ua.ie || JSON.parse(JSON.stringify(document.createElement('input').value)) === ""),
        _canUseNativeParse = (typeof (JSON) === 'object' && JSON !== null) && (JSON.parse(JSON.stringify({0:"a"})))[0] === "a";

    return {
        /**
         * Takes a JSON formatted string and attempts to parses it and convert it into an object
         * @param {string} jsonString JSON string to parse
         * @return {Object|boolean} JavaScript object on success or false if parsing failed
         */
        parse: function(jsonString)
        {
            var parseFunction = (_canUseNativeParse) ? JSON.parse : YAHOO.lang.JSON.parse;
            return (this.parse = function(jsonString){try{ return parseFunction(jsonString);} catch(e){return false;}})(jsonString);
        },

        /**
         * Takes an object and converts into a JSON string
         * @param {Object} jsonObject JavaScript object to convert
         * @return {string} JSON encoded string
         */
        stringify: function(jsonObject)
        {
            var stringifyFunction = (_canUseNativeStringify) ? JSON.stringify : YAHOO.lang.JSON.stringify;
            return (this.stringify = function(jsonObject){try{ return stringifyFunction(jsonObject);} catch(e){return false;}})(jsonObject);
        }
    };
}());