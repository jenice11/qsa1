if(RightNow.Ajax)
    throw new Error("The RightNow.Ajax namespace variable has already been defined somewhere.");
/**
 * RightNow.Ajax
 *
 * @namespace Contains any functions which relate to making or handling Ajax requests.
 */
RightNow.Ajax = (function(){
    var _additionalRequestData = {},
        _permanentAdditionalRequestData = {},
        _isNavigatingAwayFromPage = false;
    
    return {
        /**
         * @constant
         * @description A URL of this length is supported by all browsers. IE is the limiting factor here: http://support.microsoft.com/kb/208427
         */
        MAX_URL_LENGTH: 2048,

        /** 
         * Adds a key-value pair to the next request made. This data will not be
         * passed like form data, but will appear as a top level key in the post 
         * data. These values will be added to the post data before on_before_ajax_request.
         * @param {string} key The name of the data to add
         * @param {string} value The value to add
         * @param {boolean=} permanent Denotes if parameter should be sent with every Ajax request made and not cleared out after each request
         */
        addRequestData: function(key, value, permanent) {
            permanent = permanent || false;
            if(permanent)
                _permanentAdditionalRequestData[key] = value;
            else
                _additionalRequestData[key] = value;
        },
    
        /**
         * Takes an object and converts it to a POST data string. Functions or sub
         * objects within the object will not be added to the string.
         * @param {Object} postData Object The object to convert to POST data
         * @return {string} The object data converted into POST format
         */
        convertObjectToPostString: function(postData)
        {
            var postString = "";
            for(var post in postData)
            {
                if(!postData.hasOwnProperty(post) || typeof postData[post] === "function" || typeof postData[post] === "object" || postData[post] === undefined)
                    continue;
                postString += encodeURIComponent(post) + "=" + encodeURIComponent(postData[post]) + "&";
            }
    
            // Trim trailing '&'
            if(postString.length > 0)
                postString = postString.substring(0, postString.length - 1);
    
            return postString;
        },

        /**
         * Takes an object and converts it to a GET data string. Functions, sub-
         * objects, undefined, null, or empty string values within the object 
         * will not be added to the string.
         * @param {Object} requestData Object The object to convert to GET data
         * @return {string} The object data converted into GET format
         */
        convertObjectToGetString: function(requestData)
        {
            var getString = "",
                key, value;
            for(key in requestData)
            {
                value = requestData[key];
                if(requestData.hasOwnProperty(key) && typeof value !== "function" && typeof value !== "object" && typeof value !== "undefined" && value !== null && value !== "")
                {
                    getString += "/" + encodeURIComponent(key) + "/" + encodeURIComponent(value);
                }
            }
            return getString;
        },
    
        /**
         * Makes an asynchronous request.
         * @param {string} url The URL to make the request
         * @param {Object} postData The data to send with the request; keys & values are converted to POST/GET parameters
         * @param {Object=} [requestOptions=null] Configuration options for the request. Valid keys are:
         *      successHandler: (function) callback function for the successful request, 
         *      failureHandler: (function) callback function for a failed request, 
         *      uploadHandler: (function), callback function for a successful upload, 
         *      challengeHandler: (function), callback function for handling an abuse challenge response,
         *      scope: (object) scope to apply to handler(s) (defaults to window if none supplied), 
         *      data: (object) {eventName: (string) name of the RightNow event to fire upon the response, data: (object) data to send along w/ the event}, 
         *      timeout: (int) time to wait (in milliseconds) for the request to complete (defaults to 20000),
         *      type: (string) "POST", "GET", "GETPOST" (attempt to use GET but fallback to POST if a valid GET request can't be made) (defaults to "POST"),
         * @return {Object} The instance of the request object
         */
        makeRequest: function(url, postData, requestOptions)
        {
            if(requestOptions === null || requestOptions === undefined)
                requestOptions = {};
            if(!requestOptions.type)
                requestOptions.type = "POST";
            requestOptions.url = url;
            requestOptions.post = postData || {};
            YAHOO.lang.augmentObject(requestOptions.post, _additionalRequestData, true);
            YAHOO.lang.augmentObject(requestOptions.post, _permanentAdditionalRequestData, true);
            _additionalRequestData = {};
            RightNow.Event.fire("on_before_ajax_request", requestOptions);
            requestOptions.data = RightNow.Lang.cloneObject(requestOptions.data);
            // If the user uses the hook above to change the URL, there is no guarantee that the
            // function they are calling supports GET, so we fall back to only using POST.
            if (requestOptions.type === "GETPOST" && requestOptions.url !== url)
                requestOptions.type = "POST";
            var callback = {
                    failureHandler: requestOptions.failureHandler || this.genericFailure,
                    timeout: requestOptions.timeout || 20000 //Default to 20 second timeout. If you've waited around this long, I salute you.
            };
            if(requestOptions.uploadHandler)
                callback.upload = requestOptions.uploadHandler;
            if(requestOptions.scope)
                callback.scope = requestOptions.scope;
            if(requestOptions.data !== null && requestOptions.data !== undefined)
                callback.argument = requestOptions.data;
            if(!requestOptions.challengeHandler) 
                requestOptions.challengeHandler = new RightNow.UI.AbuseDetection.Default().getChallengeHandler();
            if(!requestOptions.successHandler) 
                requestOptions.successHandler = this.genericSuccess;
    
            if(RightNow.Url.getSession() !== "")
                requestOptions.url = RightNow.Url.addParameter(requestOptions.url, 'session', RightNow.Url.getSession());
    
            /**@ignore*/
            callback.success = function(responseObject) {
                if(RightNow.UI.AbuseDetection.doesResponseIndicateAbuse(responseObject)) {
                    try {
                        requestOptions.challengeHandler(RightNow.JSON.parse(RightNow.Text.getSubstringAfter(responseObject.responseText, "\n")), requestOptions, RightNow.UI.AbuseDetection.isRetry());
                    }
                    catch(e) {
                        RightNow.UI.Dialog.messageDialog(RightNow.Interface.getMessage("ERROR_REQUEST_ACTION_COMPLETED_MSG"), {"icon": "WARN"});
                    }
                }
                else {
                    requestOptions.successHandler.call(this, responseObject);
                }
            };
            
            /**@ignore*/
            callback.failure = function(responseObject){
                if (!_isNavigatingAwayFromPage)
                    callback.failureHandler.call(this, responseObject);
            };

            if (requestOptions.type === "GETPOST")
            {
                var getString = ((requestOptions.url.charAt(requestOptions.url.length - 1) === '/')
                        ? requestOptions.url.substring(0, requestOptions.url.length - 1)
                        : requestOptions.url)
                    + this.convertObjectToGetString(requestOptions.post);
                if (getString.length < this.MAX_URL_LENGTH)
                    return YAHOO.util.Connect.asyncRequest("GET", getString, callback);
            }
            return YAHOO.util.Connect.asyncRequest(requestOptions.type === "GETPOST" ? "POST" : requestOptions.type, requestOptions.url, callback, this.convertObjectToPostString(requestOptions.post) || undefined);
        },
    
        /**
         * Generic function to handle the response from an Ajax request. Checks data
         * integrity, decodes data, and fires the event found in the response data argument.
         * @param {Object} responseObject The object received from a successful request
         */
        genericSuccess: function(responseObject)
        {
            if(responseObject.responseText !== "null")
            {
                var parsedData = "";
                try
                {
                    parsedData = RightNow.JSON.parse(responseObject.responseText);
                }
                catch(e)
                {
                    RightNow.UI.Dialog.messageDialog(RightNow.Interface.getMessage("ERROR_REQUEST_ACTION_COMPLETED_MSG"), {"icon": "WARN"});
                }
                if(responseObject.argument)
                {
                    if(responseObject.argument.eventName)
                    {
                        if(responseObject.argument.data)
                            RightNow.Event.fire(responseObject.argument.eventName, parsedData, responseObject.argument.data);
                        else
                            RightNow.Event.fire(responseObject.argument.eventName, parsedData);
                    }
                }
            }
            else
            {
                RightNow.UI.Dialog.messageDialog(RightNow.Interface.getMessage("ERROR_REQUEST_ACTION_COMPLETED_MSG"), {"icon": "WARN"});
            }
        },
    
        /**
         * Generic function used to handle failures during an Ajax request
         * @param {Object} o The object received from a failed request
         */
        genericFailure: function(o)
        {
            if(!o.argument || !o.argument.ignoreFailure)
                RightNow.UI.Dialog.messageDialog(RightNow.Interface.getMessage("ERROR_REQUEST_ACTION_COMPLETED_MSG"), {"icon": "WARN"});
        },
    
        /**
         * Function to allow aborting from an Ajax request
         * @param {Object} request The connection object returned from makeRequest
         * @param {Object} callback Callback object with failure handler to execute after abort
         * @return {boolean} Denotes if abortion was successful
         */
        abortRequest: function(request, callback)
        {
            return YAHOO.util.Connect.abort(request, callback);
        },
        
        /**
         * We want to know if the user is trying to navigate away form the page so we can ignore server errors
         * @param {boolean} isNavigating true if the window is navigating away from the current page or to the same page
         */
        setIsNavigatingAwayFromPage: function(isNavigating)
        {
            _isNavigatingAwayFromPage = isNavigating;
        }
    };
}());

/**
 * Clicktrack Controller
 * @namespace Contains constants and functions for recording user actions within clickstreams.
 */
RightNow.Ajax.CT = (function()
{
    var entries =  [],
        /**@inner*/
        insert =  function(callback, scope){
            if(entries && entries.length) {
                //dqa doesn't return anything: callback function or no-op handler fcn that won't try to parse results or throw an error if the request is interrupted
                RightNow.Ajax.makeRequest(RightNow.Ajax.CT.DQA_SERVICE, {data:RightNow.JSON.stringify(entries)}, {successHandler: callback || function(){}, failureHandler: callback || function(){}, "scope": scope});
            }
            entries = [];
        };
    
    return {

        /**@constant**/CLICKSTREAM: 1,
        /**@constant**/SOLVED_COUNT: 2,
        /**@constant**/LINKS: 3,
        /**@constant**/ANS_STATS: 4,
        /**@constant**/STATS: 5,
        /**@constant**/KEYWORD_SEARCHES: 8,
        /**@constant**/WIDGET_STATS: 9,
        /**@constant**/GA_SESSIONS: 11,
        /**@constant**/GA_SESSION_DETAILS: 12,
        /**@constant**/DQA_SERVICE:  '/ci/dqa/publish',
        /**
         * This function is used to insert an action to DQA. However, it will not commit until commitActions function is called.
         * @param {number} type Action type
         *  CLICKSTREAM(1) Clickstream action
         *  SOLVED_COUNT(2) Solved Count action
         *  LINKS (3) Links action
         *  ANS_STATS(4) inserting into ans_stats table
         *  STATS(5) inserting into ans_stats table
         *  KEYWORD_SEARCHES(8) keyword searches
         *  WIDGET_STATS(9) Widget stats
         * @param {Object} action DQA action in JavaScript object.
         */
        addAction: function(type, action)
        {
            entries.push({"type":type, "action":action});
        },

        /**
         * Sends current action queue to server
         * @param {function()=} callback Callback function to execute when request completes
         * @param {Object=} scope Scope to apply to the callback function
         */
        commitActions: function(callback, scope)
        {
            insert(callback, scope);
        },

         /**
         * This function is used to add submit a click action to DQA. Action will be
         * submitted to the server immediately.
         * @param {number} type Action type
         *  CLICKSTREAM(1) Clickstream action
         *  SOLVED_COUNT(2) Solved Count action
         *  LINKS (3) Links action
         *  ANS_STATS(4) inserting into ans_stats table
         *  STATS(5) inserting into ans_stats table
         *  KEYWORD_SEARCHES(8) keyword searches
         *  WIDGET_STATS(9) Widget Stats
         *  GA_SESSIONS (11) Guided Assistant Sesssions
         *  GA_SESSION_DETAILS (12) Guided Assistant Sesssion Details
         * @param {Object} action DQA action in JSON format.
         * @param {function()=} callback Callback function to execute when request completes
         * @param {Object=} scope Scope to apply to the callback function
         */
        submitAction: function(type, action, callback, scope)
        {
            this.addAction(type, action);
            insert(callback, scope);
        }        
    };
}());

(function(){
     // set up a listener for when the user navigates away from the page
     // also check to make sure that the handler wasn't already set for window.onbeforeunload
     // if it was then fire it.
     var beforeUnload = window.onbeforeunload;
     window.onbeforeunload = function(e){if(beforeUnload){beforeUnload(e);} RightNow.Ajax.setIsNavigatingAwayFromPage(true);};
})();

